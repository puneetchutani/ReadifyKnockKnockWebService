//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReadifyKnockKnockWebServiceTests.KnockService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://knocknock.readify.net", ConfigurationName="KnockService.IKnock")]
    public interface IKnock {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://knocknock.readify.net/IKnock/GetToken", ReplyAction="http://knocknock.readify.net/IKnock/GetTokenResponse")]
        System.Guid GetToken();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://knocknock.readify.net/IKnock/GetToken", ReplyAction="http://knocknock.readify.net/IKnock/GetTokenResponse")]
        System.Threading.Tasks.Task<System.Guid> GetTokenAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://knocknock.readify.net/IKnock/Fibonacci", ReplyAction="http://knocknock.readify.net/IKnock/FibonacciResponse")]
        long Fibonacci(long num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://knocknock.readify.net/IKnock/Fibonacci", ReplyAction="http://knocknock.readify.net/IKnock/FibonacciResponse")]
        System.Threading.Tasks.Task<long> FibonacciAsync(long num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://knocknock.readify.net/IKnock/ReverseWords", ReplyAction="http://knocknock.readify.net/IKnock/ReverseWordsResponse")]
        string ReverseWords(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://knocknock.readify.net/IKnock/ReverseWords", ReplyAction="http://knocknock.readify.net/IKnock/ReverseWordsResponse")]
        System.Threading.Tasks.Task<string> ReverseWordsAsync(string s);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://knocknock.readify.net/IKnock/TriangleType", ReplyAction="http://knocknock.readify.net/IKnock/TriangleTypeResponse")]
        string TriangleType(int a, int b, int c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://knocknock.readify.net/IKnock/TriangleType", ReplyAction="http://knocknock.readify.net/IKnock/TriangleTypeResponse")]
        System.Threading.Tasks.Task<string> TriangleTypeAsync(int a, int b, int c);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKnockChannel : ReadifyKnockKnockWebServiceTests.KnockService.IKnock, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KnockClient : System.ServiceModel.ClientBase<ReadifyKnockKnockWebServiceTests.KnockService.IKnock>, ReadifyKnockKnockWebServiceTests.KnockService.IKnock {
        
        public KnockClient() {
        }
        
        public KnockClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KnockClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KnockClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KnockClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Guid GetToken() {
            return base.Channel.GetToken();
        }
        
        public System.Threading.Tasks.Task<System.Guid> GetTokenAsync() {
            return base.Channel.GetTokenAsync();
        }
        
        public long Fibonacci(long num) {
            return base.Channel.Fibonacci(num);
        }
        
        public System.Threading.Tasks.Task<long> FibonacciAsync(long num) {
            return base.Channel.FibonacciAsync(num);
        }
        
        public string ReverseWords(string s) {
            return base.Channel.ReverseWords(s);
        }
        
        public System.Threading.Tasks.Task<string> ReverseWordsAsync(string s) {
            return base.Channel.ReverseWordsAsync(s);
        }
        
        public string TriangleType(int a, int b, int c) {
            return base.Channel.TriangleType(a, b, c);
        }
        
        public System.Threading.Tasks.Task<string> TriangleTypeAsync(int a, int b, int c) {
            return base.Channel.TriangleTypeAsync(a, b, c);
        }
    }
}
